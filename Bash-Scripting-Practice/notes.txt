1) If i have log files and i want to extract data based on fatality
Command => grep "<specify the word on the basis of which you need to filter>" system.log

2) As scenario where i have to fetch only those files which have .log extension which were recently updated.
Command => find . -name "*.log" -mtime -1
find -> will find the files
. -> current directory
-name "*.log" -> all the file names with .log extension
-mtime -1 -> updated 1 day ago

3) Give executabel permission to our shell script
Command => chmod +x <file_name.sh>
chmod -> changes file permissions
+x -> adds execute permission

4) Assign Variable => dir_name="/users/app/sunil"
Note: There should not be any spaces betwwen variable name and the value

5) To access variables => $<variable_name>

6) Arrays in Shell Script => array_name = ["text1" "text2" "text3"] 
Note: we have spaces here instead of comma
To access the array => "${array_name[index]}"

7) For Loops => 
for <loop variable> in $<array>; do
-------tasks to do--------
done

[@] => Array subscript - meaning each element remains in separate entity
${ERROR_PATTERNS[*]} => How to iterate through array elements. Meaning expand all elements into one big string
${ERROR_PATTERNS[@]} => Expands each element as a separate word

8) For writing contents into a file =>
- create a vriable with the destination location file
- after the echo command add "> $<destination path variable name>"
- > and >> are redirection operatorsused to send output to a file instead of displaying it on the terminal.
- > will overwrite the previous content everytime the command is executed and >> appends every new output to the existing file content

9) Conditional Keywords =>
if ["$<variable> -gt/lt <number>"]; then
    echo --------
fi

if - starts the Conditional
then - runs if the condition is true
else - runs if condition is false
elif - for multiple conditions
fi - closes the if block (like an end statement)